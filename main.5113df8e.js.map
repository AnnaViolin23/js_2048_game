{"version":3,"sources":["scripts/main.js"],"names":["newGame","button","document","querySelector","gameScore","fieldRows","querySelectorAll","startMessage","loseMessage","winMessage","gameBoard","gameBoardLength","length","SCORE","WIN_SCORE","isWin","addNumber","emptyCells","forEach","row","rowIndex","cell","colIndex","push","Math","floor","random","randomRow","randomCol","render","y","x","el","children","textContent","className","move","e","key","moveLeft","moveRight","moveDown","moveUp","JSON","stringify","classList","remove","checkMove","add","removeEventListener","reset","map","message","reverseLine","line","reverse","checkRows","newY","filter","reduce","acc","concat","Array","fill","movingField","_","xIndex","checkColumns","some","columm","includes","addEventListener","contains","replace","innerText"],"mappings":"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","file":"main.5113df8e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nlet newGame;\nlet gameBoard = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst gameBoardLength = gameBoard.length;\nlet SCORE = 0;\nconst WIN_SCORE = 2048;\nlet isWin = false;\n\nbutton.addEventListener('click', e => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nfunction addNumber() {\n  const emptyCells = [];\n\n  gameBoard.forEach((row, rowIndex) =>\n    row.forEach((cell, colIndex) =>\n      cell === 0 && emptyCells.push([rowIndex, colIndex])\n    )\n  );\n\n  const [randomRow, randomCol]\n    = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n  gameBoard[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction render() {\n  for (let y = 0; y < gameBoardLength; y++) {\n    for (let x = 0; x < gameBoardLength; x++) {\n      const el = fieldRows[y].children[x];\n      const cell = gameBoard[y][x];\n\n      el.textContent = cell || '';\n\n      el.className\n        = `field-cell ${cell ? `field-cell--${cell}` : ''}`;\n    }\n  }\n\n  gameScore.textContent = SCORE;\n}\n\nfunction move(e) {\n  newGame = gameBoard;\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    default:\n      return;\n  }\n\n  if (JSON.stringify(newGame) !== JSON.stringify(gameBoard)) {\n    gameBoard = newGame;\n    addNumber();\n    render();\n  }\n\n  if (isWin) {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (!checkMove()) {\n    loseMessage.classList.remove('hidden');\n    winMessage.classList.add('hidden');\n    document.removeEventListener('keydown', move);\n  }\n}\n\nfunction reset() {\n  gameBoard = gameBoard.map((y) => y.map(() => 0));\n  SCORE = 0;\n\n  [winMessage, loseMessage].forEach(message => message.classList.add('hidden'));\n}\n\nfunction reverseLine() {\n  newGame.forEach(line => line.reverse());\n}\n\nfunction moveLeft() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newGame = newGame.map(y => {\n    const newY\n      = y.filter(cell => cell !== 0)\n        .reduce((acc, cell) => {\n          const preCell = acc[acc.length - 1];\n\n          if (preCell === cell) {\n            acc[acc.length - 1] *= 2;\n            SCORE += acc[acc.length - 1];\n\n            if (acc[acc.length - 1] === WIN_SCORE) {\n              isWin = true;\n            }\n          } else {\n            acc.push(cell);\n          }\n\n          return acc;\n        }, []);\n\n    return newY.concat(Array(gameBoardLength - newY.length).fill(0));\n  });\n}\n\nfunction moveRight() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseLine();\n  moveLeft();\n  reverseLine();\n}\n\nfunction moveDown() {\n  movingField();\n  moveRight();\n  movingField();\n}\n\nfunction moveUp() {\n  movingField();\n  moveLeft();\n  movingField();\n}\n\nfunction movingField() {\n  newGame\n    = newGame[0].map((_, xIndex) =>\n      newGame.map(y => y[xIndex])\n    );\n}\n\nfunction checkColumns() {\n  return newGame.some(columm =>\n    columm.some((cell, x) => cell === columm[x + 1]) || columm.includes(0)\n  );\n}\n\nfunction checkRows() {\n  return newGame.some(row =>\n    row.some((cell, x) => cell === row[x + 1]) || row.includes(0)\n  );\n}\n\nfunction checkMove() {\n  return checkRows() || (movingField(), checkColumns());\n}\n"]}